package it.richkmeli.jframework.crypto.data.model;


import it.richkmeli.jframework.crypto.controller.payload.DiffieHellmanPayload;
import it.richkmeli.jframework.crypto.util.JSONHalper;
import it.richkmeli.jframework.util.Logger;
import org.json.JSONObject;

import javax.crypto.SecretKey;
import java.security.KeyPair;
import java.security.PublicKey;


// data that has to be saved in the system
public class ClientSecureData {
    private KeyPair keyPairClient;
    // generated by the client
    private DiffieHellmanPayload diffieHellmanPayload;
    private PublicKey publicKeyServer;
    private SecretKey secretKey;

    public ClientSecureData(KeyPair keyPairClient, DiffieHellmanPayload diffieHellmanPayload, PublicKey publicKeyServer, SecretKey secretKey) {
        this.keyPairClient = keyPairClient;
        this.diffieHellmanPayload = diffieHellmanPayload;
        this.publicKeyServer = publicKeyServer;
        this.secretKey = secretKey;
    }

    public String getClientSecureDataJSON() {
        JSONObject clientSecureDataJSON = new JSONObject();

        JSONObject keyPair_ClientJSON = (this.keyPairClient != null && this.diffieHellmanPayload != null) ? JSONHalper.dhKeyPairToJSON(this.keyPairClient, diffieHellmanPayload.getPQ()) : new JSONObject();
        JSONObject diffieHellmanPayloadJSON = (this.diffieHellmanPayload != null) ? JSONHalper.dhPayloadToJSON(this.diffieHellmanPayload) : new JSONObject();
        JSONObject publicKey_ServerJSON = (this.publicKeyServer != null && this.diffieHellmanPayload != null) ? JSONHalper.dhPublicKeyToJSON(this.publicKeyServer, diffieHellmanPayload.getPQ()) : new JSONObject();
        JSONObject secretKeyJSON = (this.secretKey != null) ? JSONHalper.aesSecretKeyToJSON(this.secretKey) : new JSONObject();


        clientSecureDataJSON.put("keyPairClient", keyPair_ClientJSON);
        clientSecureDataJSON.put("diffieHellmanPayload", diffieHellmanPayloadJSON);
        clientSecureDataJSON.put("publicKeyServer", publicKey_ServerJSON);
        clientSecureDataJSON.put("secretKey", secretKeyJSON);

        return clientSecureDataJSON.toString();

    }

    public ClientSecureData(String clientSecureData) {
        try {
            if (clientSecureData != null) {
                if (!clientSecureData.equalsIgnoreCase("")) {
                    //Logger.info("clientSecureDataJSON: " + clientSecureData);

                    JSONObject clientSecureDataJSON = new JSONObject(clientSecureData);

                    JSONObject keyPair_ClientJSON = clientSecureDataJSON.has("keyPairClient") ? clientSecureDataJSON.getJSONObject("keyPairClient") : new JSONObject();
                    JSONObject diffieHellmanPayloadJSON = clientSecureDataJSON.has("diffieHellmanPayload") ? clientSecureDataJSON.getJSONObject("diffieHellmanPayload") : new JSONObject();
                    JSONObject publicKey_ServerJSON = clientSecureDataJSON.has("publicKeyServer") ? clientSecureDataJSON.getJSONObject("publicKeyServer") : new JSONObject();
                    JSONObject secretKeyJSON = clientSecureDataJSON.has("secretKey") ? clientSecureDataJSON.getJSONObject("secretKey") : new JSONObject();

                    this.keyPairClient = (!keyPair_ClientJSON.toString().equalsIgnoreCase("{}")) ? JSONHalper.dhKeyPairFromJSON(keyPair_ClientJSON) : null;
                    this.diffieHellmanPayload = (!diffieHellmanPayloadJSON.toString().equalsIgnoreCase("{}")) ? JSONHalper.dhPayloadFromJSON(diffieHellmanPayloadJSON) : null;
                    this.publicKeyServer = (!publicKey_ServerJSON.toString().equalsIgnoreCase("{}")) ? JSONHalper.dhPublicKeyFromJSON(publicKey_ServerJSON) : null;
                    this.secretKey = (!secretKeyJSON.toString().equalsIgnoreCase("{}")) ? JSONHalper.aesSecretKeyFromJSON(secretKeyJSON) : null;

                } else {
                    Logger.error("ClientSecureData, JSON file is empty");
                }
            } else {
                Logger.error("ClientSecureData, JSON file is null");
            }
        } catch (Exception e) {
            Logger.error("ClientSecureData", e);
            //e.printStackTrace();
        }
    }

    public KeyPair getKeyPairClient() {
        return keyPairClient;
    }

    public void setKeyPairClient(KeyPair keyPairClient) {
        this.keyPairClient = keyPairClient;
    }

    public DiffieHellmanPayload getDiffieHellmanPayload() {
        return diffieHellmanPayload;
    }

    public void setDiffieHellmanPayload(DiffieHellmanPayload diffieHellmanPayload) {
        this.diffieHellmanPayload = diffieHellmanPayload;
    }

    public PublicKey getPublicKeyServer() {
        return publicKeyServer;
    }

    public void setPublicKeyServer(PublicKey publicKeyServer) {
        this.publicKeyServer = publicKeyServer;
    }

    public SecretKey getSecretKey() {
        return secretKey;
    }

    public void setSecretKey(SecretKey secretKey_Client) {
        this.secretKey = secretKey_Client;
    }


}





/*

    public String getClientSecureDataJSON() {
        Gson gson = new Gson();
        return gson.toJson(this, ClientSecureData.class);
    }

    public ClientSecureData(String clientSecureDataJSON) {
        */
/*GsonBuilder gsonBuilder = new GsonBuilder();
        gsonBuilder.registerTypeAdapter(ClientSecureData.class, new ClientSecureDataInstanceCreator(null,null,null,null));
        Gson gson = gsonBuilder.create();
*//*

        if (clientSecureDataJSON != null) {
            if (!clientSecureDataJSON.equalsIgnoreCase("")) {
                Logger.info("clientSecureDataJSON: " + clientSecureDataJSON);

                //Gson gson = new Gson();
                GsonBuilder gsonBuilder = new GsonBuilder();
                gsonBuilder.registerTypeAdapter(PrivateKey.class, new ClientPrivateKeyInstanceCreator(clientSecureDataJSON));
                gsonBuilder.registerTypeAdapter(PublicKey.class, new ClientPublicKeyInstanceCreator(clientSecureDataJSON));
                gsonBuilder.registerTypeAdapter(SecretKey.class, new ClientSecretKeyInstanceCreator(clientSecureDataJSON));
                Gson gson = gsonBuilder.create();

                ClientSecureData clientSecureDataTMP = gson.fromJson(clientSecureDataJSON, ClientSecureData.class);

                if (clientSecureDataTMP != null) {
                    this.keyPairClient = clientSecureDataTMP.keyPairClient;
                    this.diffieHellmanPayload = clientSecureDataTMP.diffieHellmanPayload;
                    this.publicKeyServer = clientSecureDataTMP.publicKeyServer;
                    this.secretKey = clientSecureDataTMP.secretKey;
                } else {
                    Logger.error("ClientSecureData, Error parsing JSON");
                }
            } else {
                Logger.error("ClientSecureData, JSON file is empty");
            }
        } else {
            Logger.error("ClientSecureData, JSON file is null");
        }
    }





class ClientPrivateKeyInstanceCreator implements com.google.gson.InstanceCreator<PrivateKey> {
    private String x;
    private String p;
    private String g;

    public ClientPrivateKeyInstanceCreator(String json) {
        JSONObject jsonObject = new JSONObject(json);

        JSONObject jsonObject1 = jsonObject.getJSONObject("keyPairClient");
        JSONObject jsonObject2 = jsonObject1.getJSONObject("privateKey");
        x = jsonObject2.getString("x");
        JSONObject jsonObject3 = jsonObject.getJSONObject("diffieHellmanPayload");
        JSONArray jsonObject4 = jsonObject3.getJSONArray("pg");
        p = jsonObject4.getString(0);
        g = jsonObject4.getString(1);
    }

    @Override
    public PrivateKey createInstance(Type type) {
        try {
            //Logger.info("ClientPublicKeyInstanceCreator, x: "+x + " p: " + p + " g: " + g);
            return DiffieHellman.loadPrivateKey(x, p, g);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
}

class ClientPublicKeyInstanceCreator implements com.google.gson.InstanceCreator<PublicKey> {
    private String y;
    private String p;
    private String g;

    public ClientPublicKeyInstanceCreator(String json) {
        JSONObject jsonObject = new JSONObject(json);
        JSONObject jsonObject1 = jsonObject.getJSONObject("keyPairClient");
        JSONObject jsonObject2 = jsonObject1.getJSONObject("publicKey");
        y = jsonObject2.getString("y");
        JSONObject jsonObject3 = jsonObject.getJSONObject("diffieHellmanPayload");
        JSONArray jsonObject4 = jsonObject3.getJSONArray("pg");
        p = jsonObject4.getString(0);
        g = jsonObject4.getString(1);
    }

    @Override
    public PublicKey createInstance(Type type) {
        try {
            //Logger.info("ClientPublicKeyInstanceCreator, y: "+y + " p: " + p + " g: " + g);
            return DiffieHellman.loadPublicKey(y, p, g);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
}

class ClientSecretKeyInstanceCreator implements com.google.gson.InstanceCreator<SecretKey> {
    private byte[] encoded;
    private String algorithm;

    public ClientSecretKeyInstanceCreator(String json) {
        JSONObject jsonObject = new JSONObject(json);
        JSONObject jsonObject1 = jsonObject.getJSONObject("secretKey");
        //value = jsonObject1.getJSONArray("key").toString();
        //value = jsonObject1.getString("key");
        //value = jsonObject.getString("secretKey");

        JSONArray value = jsonObject1.getJSONArray("key");
        encoded = new byte[value.length()];
        // parse every byte in JSONArray
        for (int i =0; i < value.length(); i++ ) {
            encoded[i] = Byte.parseByte(Integer.toString((int)value.get(i)));
        }

        algorithm = jsonObject1.getString("algorithm");
    }

    @Override
    public SecretKey createInstance(Type type) {
        return new SecretKeySpec(encoded,algorithm);
    }
}

*/
